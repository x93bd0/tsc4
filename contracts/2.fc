{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

{-
	the first matrix is n*m, the second is m*p

	if the matrices are 2*5 + 5*5, the final matrix is n*p = 2*5
	if the matrices are 2*5 + 5*6, the final matrix is n*p = 2*6
	so you don't need to fill with 0s, just create the 3rd matrix with the correct dimensions
-}

() recv_internal() {
}

(int) tlen (tuple t) asm "TLEN";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
	tuple matrixC = empty_tuple();
	int n = matrixA.tlen();
	int m = matrixB.tlen();
	int p = matrixB.at(0).tlen();
	int i = 0;

	repeat (n) {
		tuple temp = empty_tuple();
		int j = 0;

		repeat (p) {
			int sum = 0;

			int k = 0;
			repeat (m) {
				sum = sum + (matrixA.at(i).at(k) * matrixB.at(k).at(j));
				k += 1;
			}

			temp~tpush(sum);
			j += 1;
		}

		matrixC~tpush(temp);
		i += 1;
	}

	return matrixC;
}
