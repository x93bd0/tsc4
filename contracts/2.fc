{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

{-
	the first matrix is n*m, the second is m*p

	if the matrices are 2*5 + 5*5, the final matrix is n*p = 2*5
	if the matrices are 2*5 + 5*6, the final matrix is n*p = 2*6
	so you don't need to fill with 0s, just create the 3rd matrix with the correct dimensions
-}

() recv_internal() {
}

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, ()) push_back(tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back(tuple t) asm "UNCONS";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
	tuple matrixC = null();
	int n = tlen(matrixA);
	int m = tlen(matrixB);
	int p = tlen(matrixB.car());
	int i = 0;

	while (i < n) {
		tuple temp = empty_tuple();
		int j = 0;

		while (j < p) {
			int sum = 0;

			int k = 0;
			while (k < m) {
				sum = sum + (matrixA.at(i).at(k) * matrixB.at(k).at(j));
				k = k + 1;
			}

			temp~push_back(sum);
			j = j + 1;
		}

		matrixC~push_back(temp);
		i = i + 1;
	}

	return matrixC;
}
