{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder c = begin_cell();
  shift -= (shift / 25) * 25;

  slice s = text.begin_parse();
  int flag = 1;

  while (flag) {
    int char = s~load_uint(8);
    if (char == 0) {
      flag = 0;
    } else {
      char += shift;
      if (char > 122) {
        char = 97 + (char - 122);
      }

      c.store_uint(8, char);
    }
  }

  repeat (s.slice_refs()) {
      c.store_ref(caesar_cipher_encrypt(shift, s~load_ref()));
  }

  return c.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder c = begin_cell();
  shift -= (shift / 25) * 25;

  slice s = text.begin_parse();
  int flag = 1;

  while (flag) {
    int char = s~load_uint(8);
    if (char == 0) {
      flag = 0;
    } else {
      char -= shift;
      if (char < 97) {
        char = 97 + (97 - char);
      }

      c.store_uint(8, char);
    }
  }

  repeat (s.slice_refs()) {
      c.store_ref(caesar_cipher_decrypt(shift, s~load_ref()));
  }

  return c.end_cell();
}

