{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

;; x93bd0 UwU

() recv_internal() {
}

builder store_ref(builder b, cell c) asm(c b) "STREF";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder c = begin_cell();
  slice s = text.begin_parse();

  shift -= (shift / 25) * 25;

  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if (char >= 97) & (char <= 122) { ;; min
      char += shift;
      if (char > 122) {
        char = 96 + (char - 122);
      }
    }

    if (char >= 65) & (char <= 90) {  ;; may
      char += shift;
      if (char > 90) {
        char = 64 + (char - 90);
      }
    }

    c~store_uint(char, 8);
  }

  {- if (s.slice_refs()) {
    cell next = s~load_ref();
    c = store_ref(c, caesar_cipher_encrypt(shift, next));
  } -}

  return c.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder c = begin_cell();
  slice s = text.begin_parse();

  shift -= (shift / 25) * 25;

  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if (char >= 97) & (char <= 122) { ;; min
      char -= shift;
      if (char < 97) {
        char = 123 - (97 - char);
      }
    }

    if (char >= 65) & (char <= 90) {  ;; may
      char -= shift;
      if (char < 65) {
        char = 91 - (65 - char);
      }
    }

    c~store_uint(char, 8);
  }

  {- if (s.slice_refs()) {
    cell next = s~load_ref();
    c = store_ref(c, caesar_cipher_decrypt(shift, next));
  } -}

  return c.end_cell();
}
